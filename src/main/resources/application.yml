server:
  port: 8082
  servlet:
    context-path: /

spring:
  application:
    name: login
  thymeleaf:
    encoding: UTF-8
    servlet:
      content-type: text/html
    cache: false
  mail:
    host: smtp.qq.com
    username: 1623285565@qq.com
    password: "bzymasfcpivnbbac"
#  启动SSL时的配置
    smtp:
      socketFactory:
        class: javax.net.ssl.SSLSocketFactory
        fallback: false
        port: 465
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/yf?autoReconnect=true&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false&serverTimezone=CTT
    username: root
    password: root
  mybatis:
    type-aliases-package: com.qrcodelogin.entity
    mapper-locations: classpath:com/qrcodelogin/Dao/mapper/*.xml
    configuration:
      map-underscore-to-camel-case: true
#  mybatis-plus:
#    # xml文件路径
#    mapper-locations: classpath:mapper/*.xml
#    # 实体类路径
##    type-aliases-package: com.数据库表对应的实体类的路径
#    configuration:
#      # 驼峰转换
#      map-underscore-to-camel-case: true
#      # 是否开启缓存
#      cache-enabled: false
#      # 打印sql
#      log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#    # 全局配置
#    global-config:
#      # 数据库字段驼峰下划线转换
#      db-column-underline: true
#      # id自增类型(数据库id自增)
#      id-type: 0
  redis:
    host: localhost
#    port: 6379
    timeout: 1000   #连接超时时间
    database: 0   #默认数据库
    cluster:
      nodes:
        - localhost:6380
        - localhost:6381
        - localhost:6382
        - localhost:6383
        - localhost:6384
        - localhost:6385
    jedis:
      pool:
        max-active: 10
        max-idle: 8   #最大维持连接数
        min-idle: 2
        max-wait: 100   #最大等待连接超时时间
  kafka:
    bootstrap-servers:    #定义主机列表
      localhost:9092
    template:
      default-topic: yftopic   #定义主题名称
      loginEmail-topic:
      createOrder-Topic: createOrderTopic   # 处理秒杀商品的主题
    producer:   #定义生产者配置
      key-serializer: org.apache.kafka.common.serialization.StringSerializer   # 消息的 key 的序列化
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer # 消息的 value 的序列化
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # 消息的 value 的序列化
      retries: 3 #发送失败时，重试发送的次数
    consumer:   #定义消费者配置
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: group-1   #数据分组
      properties:
        spring:
          json:
            trusted:
              packages: com.kafka.domain  #properties.spring.json.trusted.packages 需要配置com.artisan.springkafka.domain 包下的 Message 类们。因为 JsonDeserializer 在反序列化消息时，考虑到安全性，只反序列化成信任的 Message 类。 务必配置
    listener:
      missing-topics-fatal: false   # 消费监听接口监听的主题不存在时，默认会报错。所以通过设置为 false ，解决报错
#    properties:
#      sasl.mechanism: PLAIN    #安全机制
#      security.protocol: SASL_PLAINTEXT   #安全协议



